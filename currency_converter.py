import tkinter as tkfrom tkinter import ttk, messageboximport requestsfrom functools import wrapsfrom dotenv import load_dotenvimport osimport update_checkerload_dotenv()  # Load environment variables from .env fileclass APIClient:    def __init__(self, api_key):        self.api_key = api_key    def fetch(self, url):        response = requests.get(url)        response.raise_for_status()        return response.json()class ExchangeRateAPI(APIClient):    BASE_URL = "https://v6.exchangerate-api.com/v6"    def get_supported_codes(self):        url = f"{self.BASE_URL}/{self.api_key}/codes"        data = self.fetch(url)        if data['result'] == 'success':            return {code: name for code, name in data['supported_codes']}        else:            raise ValueError("Failed to fetch currency codes")    def get_latest_rates(self, from_currency):        url = f"{self.BASE_URL}/{self.api_key}/latest/{from_currency}"        data = self.fetch(url)        if data['result'] == 'success':            return data['conversion_rates']        else:            raise ValueError("Failed to fetch exchange rates")class APIError(Exception):    passdef handle_api_errors(func):    @wraps(func)    def wrapper(*args, **kwargs):        try:            return func(*args, **kwargs)        except requests.exceptions.RequestException as e:            messagebox.showerror("Error", f"API request failed: {e}")            raise APIError(f"API request failed: {e}")        except ValueError as e:            messagebox.showerror("Error", str(e))            raise APIError(str(e))    return wrapperclass AutocompleteCombobox(ttk.Combobox):    def __init__(self, *args, **kwargs):        super().__init__(*args, **kwargs)        self._completion_list = []        self._hits = []        self._hit_index = 0        self.position = 0        self.bind('<KeyRelease>', self._handle_keyrelease)    def set_completion_list(self, completion_list):        self._completion_list = sorted(completion_list)    def _autocomplete(self, delta=0):        if delta:            self.delete(self.position, tk.END)        else:            self.position = len(self.get())        _hits = [item for item in self._completion_list if item.lower().startswith(self.get().lower())]        if _hits != self._hits:            self._hits = _hits            self._hit_index = 0        if _hits:            self._hit_index = (self._hit_index + delta) % len(_hits)            self.delete(0, tk.END)            self.insert(0, _hits[self._hit_index])            self.select_range(self.position, tk.END)    def _handle_keyrelease(self, event):        if event.keysym not in ('BackSpace', 'Left', 'Right', 'Up', 'Down'):            self._autocomplete()class CurrencyConverter:    def __init__(self, api_client):        self.api_client = api_client        self.currencies = self._get_currencies()    @handle_api_errors    def _get_currencies(self):        currencies = self.api_client.get_supported_codes()        return {f"{code} ({name})": code for code, name in currencies.items()}    @handle_api_errors    def convert_currency(self, amount, from_currency, to_currency):        from_currency_code = self.currencies[from_currency]        to_currency_code = self.currencies[to_currency]        if from_currency_code == to_currency_code:            return amount, amount, from_currency_code, to_currency_code        rates = self.api_client.get_latest_rates(from_currency_code)        if to_currency_code not in rates:            raise ValueError(f"Conversion rate for {to_currency_code} not found.")        rate = rates[to_currency_code]        result = amount * rate        return amount, result, from_currency_code, to_currency_codeclass StyleManager:    @staticmethod    def configure_styles(parent):        style = ttk.Style(parent)        style.configure('TLabel', font=('Helvetica', 12))        style.configure('TButton', font=('Helvetica', 12, 'bold'), padding=5)        style.configure('TEntry', font=('Helvetica', 12), padding=5)        style.configure('TCombobox', font=('Helvetica', 12), padding=5)        style.configure('Title.TLabel', font=('Helvetica', 16, 'bold'), padding=10)        style.configure('Result.TLabel', font=('Helvetica', 14), padding=10)        style.map('TButton',                  background=[('!active', '#0078D7'), ('pressed', '#005A9E'), ('active', '#004578')],                  foreground=[('!active', 'black'), ('pressed', 'blue'), ('active', 'grey')])class CurrencyConverterFrame(ttk.Frame):    def __init__(self, api_key):        super().__init__(padding="10 10 10 10")        self.api_key = api_key        self.currency_converter = CurrencyConverter(ExchangeRateAPI(api_key))        self._create_widgets()        self._configure_grid()    def _create_widgets(self):        StyleManager.configure_styles(self)        self.title_label = ttk.Label(self, text="Currency Converter", style='Title.TLabel')        self.title_label.grid(row=0, column=0, columnspan=2, padx=10, pady=10, sticky=tk.N)        self.amount_label = ttk.Label(self, text="Amount:", style='TLabel')        self.amount_label.grid(row=1, column=0, padx=10, pady=10, sticky=tk.W)        self.amount_entry = ttk.Entry(self, style='TEntry')        self.amount_entry.grid(row=1, column=1, padx=10, pady=10, sticky=tk.EW)        self.from_currency_label = ttk.Label(self, text="From:", style='TLabel')        self.from_currency_label.grid(row=2, column=0, padx=10, pady=10, sticky=tk.W)        self.from_currency = AutocompleteCombobox(self, values=list(self.currency_converter.currencies.keys()),                                                  style='TCombobox')        self.from_currency.grid(row=2, column=1, padx=10, pady=10, sticky=tk.EW)        self.from_currency.config(cursor="hand2")        self.to_currency_label = ttk.Label(self, text="To:", style='TLabel')        self.to_currency_label.grid(row=3, column=0, padx=10, pady=10, sticky=tk.W)        self.to_currency = AutocompleteCombobox(self, values=list(self.currency_converter.currencies.keys()),                                                style='TCombobox')        self.to_currency.grid(row=3, column=1, padx=10, pady=10, sticky=tk.EW)        self.to_currency.config(cursor="hand2")        self.convert_button = ttk.Button(self, text="Convert", command=self._convert, style='TButton')        self.convert_button.grid(row=4, column=0, columnspan=2, padx=10, pady=10, sticky=tk.EW)        self.convert_button.config(cursor="hand2")        self.result_label = ttk.Label(self, text="", style='Result.TLabel')        self.result_label.grid(row=5, column=0, columnspan=2, padx=10, pady=10, sticky=tk.EW)    def _configure_grid(self):        self.grid(row=0, column=0, sticky=tk.NSEW)        self.columnconfigure(0, weight=1)        self.columnconfigure(1, weight=1)        for row in range(6):            self.rowconfigure(row, weight=1)    @handle_api_errors    def _convert(self):        try:            amount = float(self.amount_entry.get())            from_currency = self.from_currency.get()            to_currency = self.to_currency.get()            if not from_currency or not to_currency:                raise ValueError("Please select both currencies.")            amount, result, from_currency_code, to_currency_code = self.currency_converter.convert_currency(amount,                                                                                                            from_currency,                                                                                                            to_currency)            self.result_label.config(text=f"{amount} {from_currency_code} = {result:.2f} {to_currency_code}")        except ValueError as e:            messagebox.showerror("Error", str(e))class CurrencyConverterApp(tk.Tk):    def __init__(self, api_key):        super().__init__()        self.title("Currency Converter")        self.geometry("400x300")        self.minsize(400, 300)        window_width = 400        window_height = 300        screen_width = self.winfo_screenwidth()        screen_height = self.winfo_screenheight()        x = (screen_width // 2) - (window_width // 2)        y = (screen_height // 2) - (window_height // 2)        self.geometry(f"{window_width}x{window_height}+{x}+{y}")        self.frame = CurrencyConverterFrame(api_key)        self.frame.place(relx=0.5, rely=0.5, anchor=tk.CENTER)if __name__ == "__main__":    API_KEY = os.getenv('API_KEY')    app = CurrencyConverterApp(API_KEY)    update_checker.check_for_updates('pyapril15', 'currency-converter', 'v1.0.0')    app.mainloop()